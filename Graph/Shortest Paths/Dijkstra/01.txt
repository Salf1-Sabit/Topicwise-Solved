/**
 *    author: Salfi_Sabit 
 *    created: 09.12.2022 3:34 AM
 *    problem: https://codeforces.com/problemset/problem/20/C
**/
#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL 
#include "template/debug.h"
#else 
#define dbg(args...) 
#endif

template <typename T> 
struct dijkstra { 
  int src;
  const T inf = (T) 1e12;
  int n = (int) g.size();
  vector<int> par, seen;
  vector<T> dist;
  vector<vector<array<int, 2>>> g;
  dijkstra (vector<vector<array<int, 2>>> g, int n, int src) { 
    this -> g = g;
    this -> n = n;
    this -> src = src;
    par.assign(n, -1);
    seen.assign(n, false);
    dist.assign(n, inf);
  }
  void proc_tab () { 
    multiset<array<T, 2>> ms;
    dist[src] = 0;
    ms.insert({0, src});
    while (!ms.empty()) { 
      auto u = *ms.begin();
      ms.erase(ms.begin());
      if (!seen[u[1]]) { 
        seen[u[1]] = true;
        for (auto ch : g[u[1]]) { 
          if (dist[u[1]] + ch[1] < dist[ch[0]]) { 
            dist[ch[0]] = dist[u[1]] + ch[1];
            par[ch[0]] = u[1];
            ms.insert({dist[ch[0]], ch[0]});
          }
        }
      }
    }
  }
  T get_dist (int dest) { 
    return dist[dest];
  }
  vector<int> get_path (int dest) { 
    if (dist[dest] == inf) { 
      return vector<int>{-1};
    }
    vector<int> path;
    for (int v = dest; v != -1; v = par[v]) { 
      path.push_back(v + 1);
    }
    reverse(path.begin(), path.end());
    return path;
  }
};

int main() { 
  ios::sync_with_stdio(false);
  cin.tie(0);
  int n, m;
  scanf("%d %d", &n, &m);
  vector<vector<array<int, 2>>> g(n);
  for (int i = 0; i < m; ++i) { 
    int u, v, w;
    scanf("%d %d %d", &u, &v, &w);
    g[--u].push_back({--v, w});
    g[v].push_back({u, w});
  }
  dijkstra<long long> dij(g, n, 0);
  dij.proc_tab();
  auto path = dij.get_path(n - 1);
  for (auto x : path) { 
    printf("%d ", x);
  }
  printf("\n");
  dbg("Done\n");
  return 0; 
}
