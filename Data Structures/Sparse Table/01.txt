/**
 *    author: Salfi_Sabit 
 *    created: 09.12.2022 12:06 AM
 *    problem: https://codeforces.com/contest/872/problem/B
**/
#include <bits/stdc++.h>
using namespace std;

#ifdef LOCAL 
#include "template/debug.h"
#else 
#define dbg(args...) 
#endif

template <typename T> 
struct sparse_table { 
  int N;
  int n, k;
  vector<T> a;
  vector<T> logs;
  vector<vector<T>> st;
  void gen_logs () { 
    logs[1] = 0;
    for (int i = 2; i <= N; i++) { 
      logs[i] = logs[i/2] + 1;
    }
  }
  void proc () { 
    st[0] = a;
    for (int i = 1; i <= k; ++i) { 
      for (int j = 0; j + (1 << i) - 1 < n; ++j) {
        st[i][j] = min(st[i - 1][j], st[i - 1][j + (1 << (i - 1))]);
      }
    }
  }
  sparse_table (vector<T> a, int N) { 
    this -> a = a;
    this -> N = N;
    n = (int) a.size();
    logs.assign(N + 1, 0);
    gen_logs();
    k = logs[n];
    st.assign(k + 1, vector<T>(n + 1, 0));
    proc();
  }
  T min_query (int l, int r) { 
    int p = logs[r - l + 1];
    return min(st[p][l], st[p][r - (1 << p) + 1]);
  }
};

int main() { 
  ios::sync_with_stdio(false);
  cin.tie(0);
  int n, k;
  scanf("%d %d", &n, &k);
  int mx = (int) -2e9;
  vector<int> a(n);
  for (auto& x : a) { 
    scanf("%d", &x);
    mx = max(mx, x);
  }
  const int N = (int) 1e5 + 1;
  sparse_table<int> st(a, N);
  int ans = (int) -2e9;
  if (k == 1) { 
    ans = st.min_query(0, n - 1);
  } else if (k == 2) { 
    for (int i = 0; i < n; ++i) { 
      ans = max(ans, st.min_query(0, i ? i - 1 : 0));
      ans = max(ans, st.min_query(i == n - 1 ? n - 1 : i + 1, n - 1));
    }
  } else if (3 <= k) { 
    for (int i = 0; i < n; ++i) { 
      if (a[i] == mx) { 
        int cur = a[i];
        if (i) { 
          cur = max(cur, st.min_query(0, i - 1));
        }
        if (i + 1 < n) { 
          cur = max(cur, st.min_query(i + 1, n - 1));
        }
        ans = max(ans, cur);
      }
    }
  }
  printf("%d\n", ans);
  dbg("Done\n");
  return 0; 
}